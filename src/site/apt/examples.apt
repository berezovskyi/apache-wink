 -----
 Symphony 2.0 Examples
 -----
 -----
 May 2009
 
Symphony 2.0 Examples

  Symphony 2.0 is distributed with several examples that demonstrate the framework additional features along with JAX-RS core features.
  Example are grouped by categories - "core" , "client" , "extension" and "applications" where each category in separate module. 
  More detailed information pertaining each example can be found under the <<<examples>>> directory in the the Symphony 2.0 distribution zip.
  
  
* Example Descriptions

** Symphony 2.0 additional features examples 

	<<Asset>> - This is a simple example of an application that uses the Asset concept.
	
	<<DynamicResource>> - This example demonstrates the usage of dynamic resources. 
    The Path and Workspace information is defined using the DynamicResource interface and not 
    by annotation as in regular resources.
	
	<<History>> - This example provides a reference implementation for resource versioning.  
   
	<<LinkBuilders>> - This is a simple example of an application that uses LinkBuilders.
    The LinksBuilder provides a developer a mechanism for automatic generation of all the resource 
    alternate links, as well as provides an ability to create a single custom link.
	
	<<RuntimeRegistration>> - This example demonstrates how to dynamically register resources at runtime.
	
	<<Spring>> - This example demonstrates how Symphony 2.0 can be configured via Spring Framework.
	
	<<WebDAV>> - This example demonstrates how to use the Symphony 2.0 WebDAV extension.
	
	<<Scope>> - This example shows the usage of @Scope annotation. The Scope annotation provides a user an ability to override the JAX-RS 
  default definitions of scope
	
  
** Simple applications examples 

	<<HelloWorld>> - This example demonstrates the most basic implementation of RESTful Web services
	
	<<Bookmarks>> - This example is a simple RESTful Web service implementation, that shows basic usage for some Symphony extension features, like SyndFeed and LinkBuilders    
	
	<<QADefect>> - Advanced implementation of a QA defect web service showing a custom implementation of resources and assets.
	Atom, CSV, HTML, OpenSearch and XML via JAXB representations are used within this example.
	
	<<QADefectWithSpring>> - This example provides almost the same functionality as the QADefect example, 
  	but all the resources are declared using the DynamicResource interface. Symphony 2.0 Spring integration is also demonstrated 
  	in this example.

** JAX-RS core features examples 
	
	<<CustomContext>> - This is a simple example of an applications that uses JAX-RS Context Resolver mechanism to 
    implement application level customer authorization. 
	
	<<CustomExceptionMapper>> - Example for an application that uses JAX-RS ExceptionMapper feature to map application exception to a user readable error message. 
	
	<<Jaxb>> - This example demonstrates JAX-RS support for serialization/de-serialization of JAXB annotated objects.
	
	<<Preconditions>> - This example is a reference implementation of an application that supports Optimistic Locking (OCC) concept.

** Symphony Client example

	<<QADefects-client>> - An example that introduces Symphony Client basic usage

* Building the Examples

  All of the examples were implemented and tested in Java 1.5.
  
** Build Examples using Maven 2

  Each example directory contains a <<<pom.xml>>> for use with {{{http://maven.apache.org}Maven}}.\
  In order to build a file for the example go to the specific example directory and run <<<mvn package>>>.\
  The example jar/war file is created in the same example directory.\
  
  Maven targets:\
  - <<<compile>>> - compilation of source codes into directory <<<target>>>\
  - <<<package>>> - builds the jar/war file in the example directory <<<target>>>\
  - <<<install>>> - creates a package and uploads it to the local Maven repository\
  - <<<clean>>> - deletes the <<<target>>> directory\
  - <<<idea:idea>>> - create IntelliJ Idea project files\
  - <<<eclipse:eclipse>>> - create Eclipse project files
  
  Tested with Maven 2.0.9.

** Build Examples using Ant

  Each example directory contains a <<<build.xml>>> for use with {{{http://ant.apache.org/}Ant}}.\
  In order to build a file for the example go to the specific example directory and run <<<ant>>>.\
  The example jar/war file is created in the same example directory.\ 
  
  Ant targets:\
  - <<<dist>>> - the default target (to build WAR)\
  - <<<init>>> - preparation before compile target\
  - <<<compile>>> - compilation of source codes into directory "build" before dist\
  - <<<clean>>> - the clean-up target
  
  Tested with Ant 1.6.5.
	  
  